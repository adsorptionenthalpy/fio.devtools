#!/bin/sh

#  granttransferpro.sh
#  this shell script will process the contents of a comma delimited grant transfer file
#  containing the following columns
#   investor name  (the name of the investor)
#   public key  (the key associated with the investor)
#   grant amount (the amount of the grant to be transferred in FIO SUFs)
#   This generates 1 file.
#
#     the file will be a shell script file that can be used to perform the transfer of the
#       grants using the fio protocol.
#
#     after the transfer is completed the grants may be validated using the script
#        validate_locked_token_holders.sh (which is generated by lockedtokenpro.sh
#        from the M1.csv
#
# to run this script, first go to the fio.devtools dir then run this in the following way.
#       ./utils/granttransferpro.sh /users/edr/downloads/p1.csv
#
#
#  Created by Edward Rotthoff on 01/29/2020.
#

INPUT="$1"
OLDIFS=$IFS
IFS=','
countem=0
FILE="./transfer_fio_grants.sh"


exec 3<> $FILE
echo " echo \"DANGER DANGER using a temporary pub key for testing, please replace with correct key\"" >&3
grantholderpubkey="FIO8HvHo59HFvuAvMZLJLF3yeJiurUZPnWJyjBpWqrh8kjhiCn68p"
grantholderaccount=`../fio/build/bin/clio  convert fiokey_to_account $grantholderpubkey`
hostname="35.166.53.205:8889"

#echo " echo \"reading token transfer fee from the fio blockchain\"" >&3
#echo "feeresult=\"\$(curl --header \"Content-Type: application/json\" --request post --data '{\"end_point\":\"transfer_tokens_pub_key\"}' http://$hostname/v1/chain/get_fee)\"" >&3

#echo "feeresult=\$(echo \$feeresult | cut -d \":\" -f2)" >&3
#echo "feeresult=\$(echo \$feeresult | cut -d \"}\" -f1)" >&3
#echo "echo \"fee for xfer is \$feeresult\" all grants will have this fee deducted." >&3


totalgrants=0
[ ! -f $INPUT ] && { echo "$INPUT file not found"; exit 99; }

while read -r investorname pubkey grantamount || [ -n "$investorname" ]
do
if [ $investorname != "investor" ] ; then
  grantamount=$(echo $grantamount | tr -d '\r')
  totalgrants=$(($totalgrants + $grantamount))
fi
done < $INPUT

echo " echo \"reading account balance of grant holder account $grantholderaccount from the fio blockchain\"" >&3
echo "result=\"\$(curl --header \"Content-Type: application/json\" --request post --data '{\"fio_public_key\":\"$grantholderpubkey\"}' http://$hostname/v1/chain/get_fio_balance)\"" >&3

echo "result=\$(echo \$result | cut -d \":\" -f2)" >&3
echo "result=\$(echo \$result | cut -d \"}\" -f1)" >&3
echo "echo \"amount in grant holder account is \$result\"" >&3

echo "if [ \"\$result\" -lt \"$totalgrants\" ] ; then" >&3
echo " echo \"not enough funds in grant holder account!!\"" >&3
echo "  exit 99;" >&3
echo "else" >&3


linecount=0
#the || ensures you get the last row in the file.
while read -r investorname pubkey grantamount || [ -n "$investorname" ]
do
  let linecount++

if [ "$linecount" \> "1" ] ; then
  echo "  grantamount=$grantamount" >&3
# echo "  grantamount=\$((\$grantamount - \$feeresult ))" >&3
  echo "  echo \"transferring SUF amount \$grantamount to $investorname\"" >&3
  #######################################begin line processing
  #create the presale domain account
  fioactor=`../fio/build/bin/clio  convert fiokey_to_account $pubkey`
  echo "  grant to " $investorname
  echo "  # Transfer grant to " $investorname >&3
  echo "  #Public key: '$pubkey'" >&3
  echo "  #FIO Public Address : '$fioactor'" >&3
  #perform the desired transfer.
  echo "  ./clio -u http://$hostname push action -j fio.token trnsfiopubky '{\"payee_public_key\": \"'$pubkey'\", \"amount\": '\$grantamount', \"max_fee\": \"40000000000\", \"actor\": \"$grantholderaccount\",\"tpid\":\"\"}' -p $grantholderaccount@active" >&3
fi

  #######################################end line processing

done < $INPUT
echo "fi" >&3
IFS=$OLDIFS
# Close fd 3
exec 3>&-

echo " processing complete output file is transfer_fio_grant.sh "
